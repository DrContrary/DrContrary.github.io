library(tidyverse)
library(ComplexHeatmap)
library(pheatmap)
library(readr) #to import the tab deliminated data from HTSeq
library(readxl)
library(DESeq2)
library(ggplot2)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(RColorBrewer)
#### Read in the data for Deseq     ------------------------------------------------
# start from here to read in critical raw data
setwd("C:/Users/Alyssa/Dropbox/Data/mRNA Seq/DESeq")
count.table = read.csv("Count Table All Samples.csv", row.names = 2)
count.table = count.table[,2:37]
experimental_design <- read_excel("experimental_design.xlsx", col_types = c("text", "text", "text"))
experimental_design = as.data.frame(experimental_design)
row.names(experimental_design) = experimental_design$X__1
experimental_design = experimental_design[, 2:3]
# it is critical that the names are identical
rownames(experimental_design) =colnames(count.table)
experimental_design$treatment = as.factor(experimental_design$treatment)
experimental_design$time = as.factor(experimental_design$time)
#### Analysis for Multi-Factor Design  ------------------------------------------------
#this generates the DESeq data matrix
dds = DESeqDataSetFromMatrix(countData = count.table,
colData = experimental_design,
design = ~time + treatment + time:treatment)
#relevel to make BMDM the reference
#dds$treatment = relevel(dds$treatment, ref = "BMDM")
colData(dds)$treatment <- relevel(colData(dds)$treatment, "BMDM")
# to improve speed remove the rows that have either none or 1 count
#dds = dds [rowSums(counts(dds)) >1,]
dds.LRT = DESeq(dds, test = "LRT", reduced = ~time + treatment)
resultsNames(dds.LRT)
res.LRT = results(dds.LRT)
summary(res.LRT)
head(res.LRT[order(res.LRT$padj),], 4)
dds.LRT2 = DESeq(dds, test = "LRT", reduced = ~time )
resultsNames(dds.LRT2)
res.LRT2 = results(dds.LRT2)
summary(res.LRT2)
head(res.LRT2[order(res.LRT2$padj),], 4)
head(res.LRT)
head(res.LRT2)
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "C:/Users/Alyssa/R_users/_posts/" # directory of jekyll blog (including trailing slash)
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "C:/Users/Alyssa/R_users/" # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "C:/Users/Alyssa/R_users/" # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
?overwriteAll
??overwriteAll
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "C:/Users/Alyssa/R_users/" # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
devtools::install_github("rstudio/blogdown")
install.packages(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio/blogdown")
blogdown::serve_site()
setwd("C:/Users/Alyssa/R_users")
blogdown::serve_site()
?knitr
server::jekyll()
srver::jekyll()
servr::jekyll()
servr::jekyll()
run servr::daemon_stop("400731800")
servr::daemon_stop("400731800")
local({
# fall back on '/' if baseurl is not specified
baseurl = blogdown:::get_config2('baseurl', '/')
knitr::opts_knit$set(base.url = baseurl)
# fall back on 'kramdown' if markdown engine is not specified
markdown = blogdown:::get_config2('markdown', 'kramdown')
# see if we need to use the Jekyll renderer in knitr
if (markdown == 'kramdown') knitr::render_jekyll() else knitr::render_markdown()
# input/output filenames are passed as two additional arguments to Rscript
a = commandArgs(TRUE)
d = gsub('^_|[.][a-zA-Z]+$', '', a[1])
knitr::opts_chunk$set(
fig.path   = sprintf('figure/%s/', d),
cache.path = sprintf('cache/%s/', d)
)
# set where you want to host the figures (I store them in my Dropbox folder
# served via Updog.co, but you might prefer putting them in GIT)
if (Sys.getenv('USER') == 'yihui') {
# these settings are only for myself, and they will not apply to you, but
# you may want to adapt them to your own website
knitr::opts_chunk$set(fig.path = sprintf('%s/', gsub('^.+/', '', d)))
knitr::opts_knit$set(
base.dir = '~/Dropbox/Apps/updog/drop/jekyll/',
base.url = 'https://db.yihui.name/jekyll/'
)
}
options(digits = 4)
knitr::opts_knit$set(width = 70)
knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)
})
knitr::render_markdown()
knitr::render_jekyll()
knit_with_parameters('C:/Users/Alyssa/R_users/_posts/2018-11-01-Welcome_to_the_tidyverse.Rmd')
knitr::render_jekyll()
servr::jekyll()
